/* Generated By:JJTree&JavaCC: Do not edit this line. FilterParser.java */
/**
 * [Phillip Watson] ("COMPANY") CONFIDENTIAL Unpublished Copyright Â© 2019-2020 Phillip Watson,
 * All Rights Reserved.
 *
 * NOTICE: All information contained herein is, and remains the property of COMPANY. The
 * intellectual and technical concepts contained herein are proprietary to COMPANY and may be
 * covered by U.K. and Foreign Patents, patents in process, and are protected by trade secret or
 * copyright law. Dissemination of this information or reproduction of this material is strictly
 * forbidden unless prior written permission is obtained from COMPANY. Access to the source code
 * contained herein is hereby forbidden to anyone except current COMPANY employees, managers or
 * contractors who have executed Confidentiality and Non-disclosure agreements explicitly covering
 * such access.
 *
 * The copyright notice above does not evidence any actual or intended publication or disclosure of
 * this source code, which includes information that is confidential and/or proprietary, and is a
 * trade secret, of COMPANY. ANY REPRODUCTION, MODIFICATION, DISTRIBUTION, PUBLIC PERFORMANCE, OR
 * PUBLIC DISPLAY OF OR THROUGH USE OF THIS SOURCE CODE WITHOUT THE EXPRESS WRITTEN CONSENT OF
 * COMPANY IS STRICTLY PROHIBITED, AND IN VIOLATION OF APPLICABLE LAWS AND INTERNATIONAL TREATIES.
 * THE RECEIPT OR POSSESSION OF THIS SOURCE CODE AND/OR RELATED INFORMATION DOES NOT CONVEY OR IMPLY
 * ANY RIGHTS TO REPRODUCE, DISCLOSE OR DISTRIBUTE ITS CONTENTS, OR TO MANUFACTURE, USE, OR SELL
 * ANYTHING THAT IT MAY DESCRIBE, IN WHOLE OR IN PART.
 */
package com.hillayes.query.filter.parser;

import java.io.StringReader;

import com.hillayes.query.filter.FilterFunction;
import com.hillayes.query.filter.exceptions.InvalidComparisonException;
import com.hillayes.query.filter.Operator;
import com.hillayes.query.filter.Predicate;
import com.hillayes.query.filter.QueryContext;

/**
 * The starting point for parsing a query filter. This should not be instantiated
 * but, rather, the static method {@link #parse(QueryContext, String)} should be
 * used to perform the parsing.
 *
 * @author <a href="mailto:watson.phill@gmail.com">Phill Watson</a>
 * @since 1.0.0
 */
public class FilterParser/*@bgen(jjtree)*/implements FilterParserTreeConstants, FilterParserConstants {/*@bgen(jjtree)*/
  protected JJTFilterParserState jjtree = new JJTFilterParserState();/**
     * This is the preferred method of parsing a query filter. It will parse the
     * given filter expression and, using the given QueryContext, create a node
     * tree that represents the elements of that filter expression.
     * <p>
     * The hierarchy of the nodes in the generated node tree represents the order
     * of precedence of the expressions within the filter; with the lower order
     * nodes appearing first. For example; the operator OR has a lower order then
     * the AND operator so, in the expression "a eq 2 and b gt 3 or c lt 4" the
     * tree hierachy would be:
     * <pre>
     *  Or
     *    And
     *      Comparison (a eq 2) 
     *      Comparison (b gt 3)
     *    Comparison (c lt 4)
     * </pre>
     * When the nodes are evaluated from the bottom-up the AND comparisons will
     * be evaluated before first, with the result of that comparison feeding in
     * to the OR comparisons. 
     * <p>
     * See the JUnit code for more example of how expression are parsed.
     * <p>
     * These nodes can, and should, be traversed using an instance of the interface
     * {@link FilterParserVisitor}. Perhaps the most important method of this
     * interface is {@link FilterParserVisitor#visit(ASTComparison, Object)}.
     * The given ASTComparison object holds an instance of Predicate
     * that fully describes the comparison; the named property, function (if
     * any), the operator (if any) and the value (if any). From this the
     * implementation should be able to construct the equivalent comparison in
     * whatever target notation it requires (e.g. SQL or JPA).
     * 
     * @param aContext the QueryContext implementation that will be used to
     * validate the generated Predicate.
     * @param aFilter the REST URL query filter expression to be parsed.
     * @return the root node of the parsed filter expression.
     *
     * See http://confluence.tibco.com/display/BPM/Building+the+dt-query-filter+Module
     * for more information.
     */
    public static Node parse(QueryContext aContext, String aFilter) throws ParseException, TokenMgrError, InvalidComparisonException
    {
        if ((aFilter != null) && (aFilter.length() > 0))
        {
            FilterParser parser = new FilterParser(new StringReader(aFilter));
            return parser.parse(aContext);
        }

        return(null);
    }

/**
 * The start of the parsing process. This will simply apply the "orExpression"
 * lexical analysis. The order in which the subsequent methods are called will
 * determine the order of precedence given to the AND, OR and NOT operators,
 * and how brackets can be used to override that precedence order.
 */
  final public Node parse(QueryContext aContext) throws ParseException, InvalidComparisonException {
                                                                       /*@bgen(jjtree) parse */
  ASTparse jjtn000 = new ASTparse(JJTPARSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      orExpression(aContext);
      jj_consume_token(0);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      if (jjte000 instanceof InvalidComparisonException) {
        {if (true) throw (InvalidComparisonException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Looks for a sequence of "andExpression" nodes and, if more than one, will
 * combine them under an "or" node.
 */
  final public void orExpression(QueryContext aContext) throws ParseException, InvalidComparisonException {
      ASTOr jjtn001 = new ASTOr(JJTOR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      andExpression(aContext);
      label_1:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_1;
        }
        jj_consume_token(OR);
               aContext.queryBuilder().append(" OR ");
        andExpression(aContext);
      }
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      if (jjte001 instanceof InvalidComparisonException) {
        {if (true) throw (InvalidComparisonException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
  }

/**
 * Looks for a sequence of "expression" nodes and, if more than one, will
 * combine them under an "and" node.
 */
  final public void andExpression(QueryContext aContext) throws ParseException, InvalidComparisonException {
      ASTAnd jjtn001 = new ASTAnd(JJTAND);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    try {
      expression(aContext);
      label_2:
      while (true) {
        if (jj_2_2(2)) {
          ;
        } else {
          break label_2;
        }
        jj_consume_token(AND);
                aContext.queryBuilder().append(" AND ");
        expression(aContext);
      }
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      if (jjte001 instanceof InvalidComparisonException) {
        {if (true) throw (InvalidComparisonException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
      }
    }
  }

/**
 * Looks for a comparison expression or a NOT comparison expression or a
 * sequence of expression contained within brackets.
 */
  final public void expression(QueryContext aContext) throws ParseException, InvalidComparisonException {
    if (jj_2_3(2)) {
      Comparison(aContext);
    } else if (jj_2_4(2)) {
      jj_consume_token(NOT);
                aContext.queryBuilder().append("NOT ");
          ASTNot jjtn001 = new ASTNot(JJTNOT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        orExpression(aContext);
      } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          if (jjte001 instanceof InvalidComparisonException) {
            {if (true) throw (InvalidComparisonException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
    } else if (jj_2_5(2)) {
      jj_consume_token(LPAREN);
                   aContext.queryBuilder().append('(');
      orExpression(aContext);
      jj_consume_token(RPAREN);
                   aContext.queryBuilder().append(')');
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * The start of a comparison. This will call the QueryContext to create a new
 * Predicate, and then populate that Predicate before asking
 * the QueryComparison to validate it. If the QueryComparison says it's invalid,
 * a InvalidComparisonException will be raised.
 */
  final public void Comparison(QueryContext aContext) throws ParseException, InvalidComparisonException {
                                                                           /*@bgen(jjtree) Comparison */
                                                                            ASTComparison jjtn000 = new ASTComparison(JJTCOMPARISON);
                                                                            boolean jjtc000 = true;
                                                                            jjtree.openNodeScope(jjtn000);Predicate predicate = aContext.newPredicate();
    try {
      if (jj_2_6(2)) {
        NullFunction(aContext, predicate);
      } else if (jj_2_7(2)) {
        BooleanFunction(aContext, predicate);
      } else if (jj_2_8(2)) {
        PredicateExpr(aContext, predicate);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      // validate the resulting expression
      if (! predicate.isValid())
      {
         {if (true) throw new InvalidComparisonException(predicate);}
      }

      // record the Predicate in the resulting ASTComparison node
      jjtn000.jjtSetValue(predicate);

      predicate.appendTo(aContext.queryBuilder());
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

/**
 * Looks for one of the possible NULL expressions and populates the given
 * Predicate with the name of the function, the name of the property
 * to be passed to the function. The format is expected to be:
 *
 *    function(property)
 */
  final public void NullFunction(QueryContext aContext, Predicate aPredicate) throws ParseException {
    if (jj_2_9(2)) {
      jj_consume_token(ISNULL);
                    aPredicate.setFunction(FilterFunction.ISNULL);
    } else if (jj_2_10(2)) {
      jj_consume_token(NOTNULL);
                    aPredicate.setFunction(FilterFunction.NOTNULL);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    jj_consume_token(IDENTIFIER);
                   aPredicate.setName(getToken(0).image);
    jj_consume_token(RPAREN);
  }

/**
 * Looks for one of the possible boolean expressions and populates the given
 * Predicate with the name of the function, the name of the property
 * and the value to be passed to the function. The format is expected to be:
 *
 *    function(property, value)
 */
  final public void BooleanFunction(QueryContext aContext, Predicate aPredicate) throws ParseException {
    if (jj_2_11(2)) {
      jj_consume_token(CONTAINS);
                       aPredicate.setFunction(FilterFunction.CONTAINS);
    } else if (jj_2_12(2)) {
      jj_consume_token(ENDSWITH);
                       aPredicate.setFunction(FilterFunction.ENDSWITH);
    } else if (jj_2_13(2)) {
      jj_consume_token(STARTSWITH);
                       aPredicate.setFunction(FilterFunction.STARTSWITH);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    jj_consume_token(IDENTIFIER);
                   aPredicate.setName(getToken(0).image);
    jj_consume_token(COMMA);
    jj_consume_token(QUOTED_TEXT);
                    aPredicate.setString(getToken(0).image);
    jj_consume_token(RPAREN);
  }

/**
 * Looks for a comparison, with a possible function applied to the named
 * property. It will populate the given Predicate with attributes
 * of the comparison (function name, property name, operator and value).
 * The format is expected to be:
 *
 *    function(property) operator value
 * or
 *    property operator value
 */
  final public void PredicateExpr(QueryContext aContext, Predicate aPredicate) throws ParseException {
    if (jj_2_14(2)) {
      UnaryFunction(aContext, aPredicate);
    } else if (jj_2_15(2)) {
      jj_consume_token(IDENTIFIER);
                       aPredicate.setName(getToken(0).image);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_16(2)) {
      jj_consume_token(EQ);
               aPredicate.setOperator(Operator.EQ);
    } else if (jj_2_17(2)) {
      jj_consume_token(NE);
               aPredicate.setOperator(Operator.NE);
    } else if (jj_2_18(2)) {
      jj_consume_token(GT);
               aPredicate.setOperator(Operator.GT);
    } else if (jj_2_19(2)) {
      jj_consume_token(LT);
               aPredicate.setOperator(Operator.LT);
    } else if (jj_2_20(2)) {
      jj_consume_token(GE);
               aPredicate.setOperator(Operator.GE);
    } else if (jj_2_21(2)) {
      jj_consume_token(LE);
               aPredicate.setOperator(Operator.LE);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_22(2)) {
      jj_consume_token(IDENTIFIER);
                        aPredicate.setIdentifier(getToken(0).image);
    } else if (jj_2_23(2)) {
      jj_consume_token(QUOTED_TEXT);
                        aPredicate.setString(getToken(0).image);
    } else if (jj_2_24(2)) {
      jj_consume_token(NUMERIC);
                        aPredicate.setNumber(getToken(0).image);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * Looks for one of the possible functions that take a single named property
 * as a parameter, and populates the given Predicate with the name of
 * that function and the name of the property. The format is expected to be:
 *
 *    function(property)
 */
  final public void UnaryFunction(QueryContext aContext, Predicate aPredicate) throws ParseException {
    if (jj_2_25(2)) {
      jj_consume_token(TOLOWER);
                    aPredicate.setFunction(FilterFunction.LOWER);
    } else if (jj_2_26(2)) {
      jj_consume_token(TOUPPER);
                    aPredicate.setFunction(FilterFunction.UPPER);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(LPAREN);
    jj_consume_token(IDENTIFIER);
                   aPredicate.setName(getToken(0).image);
    jj_consume_token(RPAREN);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_3R_6() {
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(NOTNULL)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(ISNULL)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(TOUPPER)) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(TOLOWER)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) return true;
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(STARTSWITH)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(ENDSWITH)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(CONTAINS)) return true;
    return false;
  }

  private boolean jj_3R_3() {
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(NUMERIC)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(QUOTED_TEXT)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) return true;
    }
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_8()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public FilterParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[26];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public FilterParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FilterParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FilterParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public FilterParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new FilterParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public FilterParser(FilterParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(FilterParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[32];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 32; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 26; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
